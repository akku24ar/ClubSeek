{
	"info": {
		"_postman_id": "ec32cd95-1d0b-4c2d-97a6-19b179c4134f",
		"name": "ClubSeek API",
		"description": "# Introduction\nClubSeek is service that specializes in recommending bars based on user preferences of quality and occupancy.\n\n# Overview\nClients can use the API to view available Bars and get reccomendadtions based on their perosnal preferences. \n\nBar Owners can use the API to perform CRUD operations on Bars and view clients assigned to their bar\n\n# Authentication\nAPI Endpoints open to clients are public and do not require authentication. Edit operations assigned to bar owners require basic authentication (/bars POST, PUT and /users GET)\n\n# Error Codes\n200 OK: Request Successful\n204 No Content: No Clients or Bars to Return\n400 Bad Request: Inputted Information is Invalid (Context in Response Output)\n401 Unauthorized: Authentication Credentials Missing or Invalid \n503 Service Unavailable: API Client is unable to connect to Database\n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Bars",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"barName\": \"SuperEshaan\",\n        \"wowFactor\": 30,\n        \"capacity\": 100,\n        \"currentTraffic\": 20,\n        \"address\": \"30 Eshaan Drive Eoin, NJ 08841\"\n    },\n    {\n        \"barName\": \"SuperAwais\",\n        \"wowFactor\": 99,\n        \"capacity\": 1000,\n        \"currentTraffic\": 900,\n        \"address\": \"84 Awais Drive Akku, NJ 08841\"\n    }, \n    {\n        \"barName\": \"SuperAkku\",\n        \"wowFactor\": 40,\n        \"capacity\": 300,\n        \"currentTraffic\": 241,\n        \"address\": \"84 Akku Drive Awais, NJ 08841\"\n    }, \n    {\n        \"barName\": \"SuperSidhu\",\n        \"wowFactor\": 89,\n        \"capacity\": 1000,\n        \"currentTraffic\": 800,\n        \"address\": \"84 Sidhu Drive Awais, NJ 08841\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/bars",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"bars"
					]
				},
				"description": "##### Schema\n\n``` json\n{\n    'type': 'array',\n    \"minItems\": 1,\n    'items': {\n        'barName': {'type': 'string',  \"minLength\": 4, \"maxLength\": 30},\n        'wowFactor': {'type': 'integer', \"minimum\": 1, \"maximum\": 100},\n        'capacity': {'type': 'integer', \"minimum\": 1, \"maximum\": 1000},\n        'currentTraffic': {'type': 'integer', \"minimum\": 1, \"maximum\": 1000},\n        'address': {'type': 'string', \"minLength\": 4, \"maxLength\": 255},\n    },\n    'required': ['barName', 'wowFactor', 'capacity', 'currentTraffic']\n}\n\n```\n\n##### **Notes**\n\n*   `currentTraffic` can't be greater than `capacity`\n*   The Primary Keys for Bars in the Database is `barName` and `address`\n    *   These attributes can't be updated once entered\n*   Bars cannot be updated with this endpoint. Use the /bars PUT endpoint for updating bars\n    \n\n##### **HTTP Responses**\n\n*   200 OK\n    *   Operation Successful\n*   400 Bad Request\n    *   A Bar has a `currentTraffic` that is greater than `capacity`\n    *   A Bar already exists in the database\n*   401 Unauthorized\n    *   Authentication Credentials Missing or Invalid"
			},
			"response": []
		},
		{
			"name": "View Bars",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "localhost:8000/bars",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"bars"
					]
				},
				"description": "##### Notes\n\n*   Bars are returned as an array of JSON Objects\n    \n\n##### HTTP Responses\n\n*   200 OK\n    *   Operation Successful\n*   204 No Content\n    *   No Clients or Bars to Return"
			},
			"response": []
		},
		{
			"name": "Update Bars",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"barName\": \"SuperEshaan\",\n    \"address\": \"30 Eshaan Drive Eoin, NJ 08841\",\n    \"wowFactorChange\": 31,\n    \"capacityChange\": 100,\n    \"currentTrafficChange\": 20\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/bars",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"bars"
					]
				},
				"description": "##### Schema\n\n``` json\n{\n    'type': 'object',\n    'properties': {\n        'barName': {'type': 'string',  \"minLength\": 4, \"maxLength\": 30},\n        'address': {'type': 'string', \"minLength\": 4, \"maxLength\": 255},\n        'wowFactorChange': {'type': 'integer', \"minimum\": 1, \"maximum\": 100},\n        'capacityChange': {'type': 'integer', \"minimum\": 1, \"maximum\": 1000},\n        'currentTrafficChange': {'type': 'integer', \"minimum\": 1, \"maximum\": 1000}\n    },\n    'required': ['barName', 'address']\n}\n\n```\n\n##### **Notes**\n\n*   `barName` and `address` can't be updated once entered\n    *   Delete and re-add Bar to change these attributes\n*   `currentTraffic` can't be greater than `capacity`\n    \n\n##### **HTTP Responses**\n\n*   200 OK\n    *   Operation Successful\n*   400 Bad Request\n    *   A Bar has a `currentTraffic` that is greater than `capacity`\n    *   There is no Bar with the following `barName` and `address`\n*   401 Unauthorized\n    *   Authentication Credentials Missing or Invalid"
			},
			"response": []
		},
		{
			"name": "Delete Bar",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"barName\": \"SuperEshaan\",\n    \"address\": \"255 Sidhu Drive Eoin, NJ 08841\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/bars",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"bars"
					]
				},
				"description": "##### Schema\n\n``` json\n{\n    'type': 'object',\n    'properties': {\n        'barName': {'type': 'string',  \"minLength\": 4, \"maxLength\": 30},\n        'address': {'type': 'string',  \"minLength\": 4, \"maxLength\": 255}\n    },\n    'required': ['barName', 'address']\n}\n\n```\n\n##### **Notes**\n\n*   `barName` and `address` are primary keys and must be supplied to identify and delete a Bar\n    \n\n##### **HTTP Responses**\n\n*   200 OK\n    *   Operation Successful\n*   400 Bad Request\n    *   There is no Bar with the following `barName` and `address`\n*   401 Unauthorized\n    *   Authentication Credentials Missing or Invalid"
			},
			"response": []
		},
		{
			"name": "Bar Selection",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Eshaan Mathur\",\n    \"phoneNumber\": \"9082834055\",\n    \"minWowFactor\": 20,\n    \"maxTraffic\": 900,\n    \"preference\": \"wowFactor\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/barSelection",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"barSelection"
					]
				},
				"description": "##### Schema\n\n``` json\n{\n    'type': 'object',\n    'properties': {\n        'name': {'type': 'string',  \"minLength\": 4, \"maxLength\": 30},\n        'phoneNumber': {'type': 'string' , \"minLength\": 10, \"maxLength\": 15},\n        'minWowFactor': {'type': 'integer', \"minimum\": 1, \"maximum\": 100},\n        'maxTraffic': {'type': 'integer', \"minimum\": 1, \"maximum\": 1000},\n        'preference': {'type': 'string'}\n    },\n    'required': ['name', 'phoneNumber']\n}\n\n```\n\n##### **Notes**\n\n*   Once a Bar has been selected for a Client, their information and Bar assignment will be stored. You can view Users with the /users GET endpoint (AuthZ required)\n    *   `name` and `phoneNumber` are primary keys for the Client\n    *   The Users Table is cleared every night. Only one request is allowed per client per night.\n*   `preference` can be `capacity` or `wowFactor`. If the attribute is not defined it will default to `capacity`\n    \n\n##### **HTTP Responses**\n\n*   200 OK\n    *   Operation Successful\n*   204 No Content:\n    *   No Bars Meet Minimum Requirements\n*   400 Bad Request\n    *   A Client already exists in the Users Table (Only One Request is allowed per Client per night)"
			},
			"response": []
		},
		{
			"name": "View Clients",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/users",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users"
					]
				},
				"description": "##### Notes\n\n*   Users are returned as an array of JSON Objects\n    \n\n##### HTTP Responses\n\n*   200 OK\n    *   Operation Successful\n*   204 No Content\n    *   No Clients or Bars to Return\n*   401 Unauthorized\n    *   Authentication Credentials Missing or Invalid"
			},
			"response": []
		},
		{
			"name": "Readiness Probe",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/readiness",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"readiness"
					]
				},
				"description": "##### Notes\n\n*   Used to Check if API Client has connection with Database\n    \n\n##### HTTP Responses\n\n*   200 OK\n    *   API Ready for Requests\n*   503 Service Unavailable\n    *   API Client is unable to connect to Database"
			},
			"response": []
		}
	]
}